{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aqsam \u2013 Open\u2011Source School Management System Aqsam (Arabic \u0623\u0642\u0633\u0627\u0645 = \u201cclasses\u201d ) is a lightweight, modular platform that helps small\u2011to\u2011medium schools handle their daily workflow\u2014\u200bfrom enrolling students to publishing grades\u2014\u200bwithout expensive vendor lock\u2011in. Architecture Flask (app factory) \u2514\u2500\u2500 Blueprints \u251c\u2500 auth/ \u251c\u2500 admin/ \u251c\u2500 teacher/ \u251c\u2500 student/ \u2514\u2500 writer/ SQLAlchemy (SQLite by default) \u2514\u2500\u2500 Models \u251c\u2500 User \u2190 base \u251c\u2500 Student / Teacher / Writer (one\u2011to\u2011one with User) \u251c\u2500 Class, Subject \u251c\u2500 Grade, Article \u2514\u2500 Junctions: teacher_subject / teacher_class / teacher_grades Database migrations are managed with Flask\u2011Migrate (Alembic) . Quick\u2011Start (Dev) # 1. Clone & enter git clone https://github.com/Samy-Y/aqsam.git cd aqsam # 2. Set up a virtual env & install deps python -m venv .venv source .venv/bin/activate # Windows: .venv\\Scripts\\activate pip install -r requirements.txt # 3. Configure (optional) cp config.json # then edit secrets / DB path # 4. Create the DB & run flask db upgrade # or python -m aqsam.db_init for quick start python run.py # http://127.0.0.1:5000 Note: In production, run Aqsam behind Gunicorn/Uwsgi + Nginx (and swap SQLite for PostgreSQL). Tech Stack Backend: Flask 3\u202f\u00b7\u202fSQLAlchemy 3\u202f\u00b7\u202fFlask\u2011Login \u00b7\u202fFlask\u2011Migrate Frontend: Jinja2\u202f\u00b7\u202fBootstrap 5 Docs: MkDocs Material CI: GitHub Actions (lint\u202f+\u202fpytest) Contributing This project isn't even finished yet. Just wait. License Aqsam is released under the MIT License .","title":"Home"},{"location":"#aqsam-opensource-school-management-system","text":"Aqsam (Arabic \u0623\u0642\u0633\u0627\u0645 = \u201cclasses\u201d ) is a lightweight, modular platform that helps small\u2011to\u2011medium schools handle their daily workflow\u2014\u200bfrom enrolling students to publishing grades\u2014\u200bwithout expensive vendor lock\u2011in.","title":"Aqsam \u2013 Open\u2011Source School Management System"},{"location":"#architecture","text":"Flask (app factory) \u2514\u2500\u2500 Blueprints \u251c\u2500 auth/ \u251c\u2500 admin/ \u251c\u2500 teacher/ \u251c\u2500 student/ \u2514\u2500 writer/ SQLAlchemy (SQLite by default) \u2514\u2500\u2500 Models \u251c\u2500 User \u2190 base \u251c\u2500 Student / Teacher / Writer (one\u2011to\u2011one with User) \u251c\u2500 Class, Subject \u251c\u2500 Grade, Article \u2514\u2500 Junctions: teacher_subject / teacher_class / teacher_grades Database migrations are managed with Flask\u2011Migrate (Alembic) .","title":"Architecture"},{"location":"#quickstart-dev","text":"# 1. Clone & enter git clone https://github.com/Samy-Y/aqsam.git cd aqsam # 2. Set up a virtual env & install deps python -m venv .venv source .venv/bin/activate # Windows: .venv\\Scripts\\activate pip install -r requirements.txt # 3. Configure (optional) cp config.json # then edit secrets / DB path # 4. Create the DB & run flask db upgrade # or python -m aqsam.db_init for quick start python run.py # http://127.0.0.1:5000 Note: In production, run Aqsam behind Gunicorn/Uwsgi + Nginx (and swap SQLite for PostgreSQL).","title":"Quick\u2011Start (Dev)"},{"location":"#tech-stack","text":"Backend: Flask 3\u202f\u00b7\u202fSQLAlchemy 3\u202f\u00b7\u202fFlask\u2011Login \u00b7\u202fFlask\u2011Migrate Frontend: Jinja2\u202f\u00b7\u202fBootstrap 5 Docs: MkDocs Material CI: GitHub Actions (lint\u202f+\u202fpytest)","title":"Tech Stack"},{"location":"#contributing","text":"This project isn't even finished yet. Just wait.","title":"Contributing"},{"location":"#license","text":"Aqsam is released under the MIT License .","title":"License"},{"location":"database_schema/","text":"Database Schema Tables Table Purpose Key Columns / Notes user Base account info (all roles) id , username , password_hash , role , profile fields student Extra fields for students PK/FK id \u2192 user, class_id teachers Extra fields for teachers PK/FK id \u2192 user, subject_id , class_id writer Grants article\u2011writing power PK/FK id \u2192 user class School class / section id , name (e.g. 1A), level subject Teachable subject id , name grade Student\u2019s grade in a subject id , student_id , subject_id , grade , date , comment article Markdown article for blog id , title , author_id , content_md , created_at , last_edited , is_published Relationships One\u2011to\u2011one: user \u2192 student|teacher|writer (same primary key) Many\u2011to\u2011one: student.class_id \u2192 class grade.student_id \u2192 student grade.subject_id \u2192 subject article.author_id \u2192 writer Many\u2011to\u2011Many Links teacher \u21c4 subject \u2003( teacher_subject ) teacher \u21c4 class \u2003 ( teacher_class ) Junction Tables Junction Tables Columns Purpose teacher_subject teacher_id , subject_id Teacher can teach multiple subjects; subject can have multiple teachers teacher_class teacher_id , class_id Teacher can teach multiple classes; class can have multiple teachers teacher_grades teacher_id , grade_id Teacher can grade multiple students across multiple subjects","title":"Database"},{"location":"database_schema/#database-schema","text":"","title":"Database Schema"},{"location":"database_schema/#tables","text":"Table Purpose Key Columns / Notes user Base account info (all roles) id , username , password_hash , role , profile fields student Extra fields for students PK/FK id \u2192 user, class_id teachers Extra fields for teachers PK/FK id \u2192 user, subject_id , class_id writer Grants article\u2011writing power PK/FK id \u2192 user class School class / section id , name (e.g. 1A), level subject Teachable subject id , name grade Student\u2019s grade in a subject id , student_id , subject_id , grade , date , comment article Markdown article for blog id , title , author_id , content_md , created_at , last_edited , is_published","title":"Tables"},{"location":"database_schema/#relationships","text":"One\u2011to\u2011one: user \u2192 student|teacher|writer (same primary key) Many\u2011to\u2011one: student.class_id \u2192 class grade.student_id \u2192 student grade.subject_id \u2192 subject article.author_id \u2192 writer","title":"Relationships"},{"location":"database_schema/#manytomany-links","text":"teacher \u21c4 subject \u2003( teacher_subject ) teacher \u21c4 class \u2003 ( teacher_class )","title":"Many\u2011to\u2011Many Links"},{"location":"database_schema/#junction-tables","text":"Junction Tables Columns Purpose teacher_subject teacher_id , subject_id Teacher can teach multiple subjects; subject can have multiple teachers teacher_class teacher_id , class_id Teacher can teach multiple classes; class can have multiple teachers teacher_grades teacher_id , grade_id Teacher can grade multiple students across multiple subjects","title":"Junction Tables"},{"location":"features/","text":"Features Area What You Get Role\u2011based dashboards Separate views for Admin , Teacher , Student , Parent , Writer Class & subject management Create classes/sections, assign teachers, link multiple subjects Many\u2011to\u2011many teacher mapping One teacher \u2192 many classes/subjects and vice\u2011versa Attendance & grading Quick roll\u2011call UI, performance history, CSV export Assignments (planned) File uploads, deadlines, submission tracking Article publishing Writers can draft, edit, and publish Markdown posts Multilingual UI Via the app/lang/ directory (Monoscript) API\u2011ready All core operations exposed via JSON (coming soon)","title":"Features"},{"location":"features/#features","text":"Area What You Get Role\u2011based dashboards Separate views for Admin , Teacher , Student , Parent , Writer Class & subject management Create classes/sections, assign teachers, link multiple subjects Many\u2011to\u2011many teacher mapping One teacher \u2192 many classes/subjects and vice\u2011versa Attendance & grading Quick roll\u2011call UI, performance history, CSV export Assignments (planned) File uploads, deadlines, submission tracking Article publishing Writers can draft, edit, and publish Markdown posts Multilingual UI Via the app/lang/ directory (Monoscript) API\u2011ready All core operations exposed via JSON (coming soon)","title":"Features"},{"location":"models/","text":"Models Documentation This document describes the data models used in the Aqsam application. User Represents a user account in the system. Attributes: id (int): Unique identifier for the user. username (str): Unique username for the user. password (str): Hashed password for the user. role (str): Role of the user (e.g., 'admin', 'teacher', 'student', 'writer'). email (str): User's email address. first_name (str): User's first name. last_name (str): User's last name. birth_date (date): User's birth date. phone_number (str): User's phone number. profile_picture_filename (str): Filename of the user's profile picture. Stored in assets/profile_pictures. email_verified (bool): Indicates if the user's email is verified. email_verification_token (str): Token for email verification. email_verification_expiry (datetime): Expiry time for the email verification token. password_reset_token (str): Token for password reset. password_reset_expiry (datetime): Expiry time for the password reset token. activated (bool): Indicates if the user's account is activated. Relationships: student (Student): One-to-one relationship with the Student model. teacher (Teacher): One-to-one relationship with the Teacher model. writer (Writer): One-to-one relationship with the Writer model. Student Represents a student in the system. Attributes: id (int): Unique identifier for the student (foreign key to User). class_id (int): Identifier for the class the student is enrolled in (foreign key to Class). Relationships: user (User): One-to-one relationship with the User model. class_ (Class): Many-to-one relationship with the Class model. grades (Grade): One-to-many relationship with the Grade model. Teacher Represents a teacher in the system. Attributes: id (int): Unique identifier for the teacher (foreign key to User). Relationships: subjects (list of Subject): Many-to-many relationship with the Subject model. classes (list of Class): Many-to-many relationship with the Class model. grades (list of Grade): One-to-many relationship with the Grade model. user (User): One-to-one relationship with the User model. Class Represents a class or grade level. Attributes: id (int): Unique identifier for the class. name (str): Name of the class (e.g., \"A\"). level (str): Grade level (e.g., \"3rd Year\"). Relationships: students (list of Student): One-to-many relationship with the Student model. teachers (list of Teacher): Many-to-many relationship with the Teacher model. Subject Represents a subject. Attributes: id (int): Unique identifier for the subject. name (str): Name of the subject. Relationships: teachers (list of Teacher): Many-to-many relationship with the Teacher model. grades (list of Grade): One-to-many relationship with the Grade model. Grade Represents a student's grade in a subject. Attributes: id (int): Unique identifier for the grade. student_id (int): Foreign key referencing the student. subject_id (int): Foreign key referencing the subject. teacher_id (int): Foreign key referencing the teacher. grade (float): The grade value. date (datetime): The date when the grade was assigned. comment (str): Optional comment about the grade. Relationships: student (Student): Many-to-one relationship with the Student model. subject (Subject): Many-to-one relationship with the Subject model. teacher (Teacher): Many-to-one relationship with the Teacher model. Writer Represents a writer in the system. Attributes: id (int): Unique identifier for the writer (foreign key to User). Relationships: user (User): One-to-one relationship with the User model. articles (list of Article): One-to-many relationship with the Article model. Article Represents an article written by a writer. Attributes: id (int): Unique identifier for the article. title (str): Title of the article. author_id (int): ID of the author (writer). content_md (str): Content of the article in Markdown format. created_at (datetime): Timestamp when the article was created. last_edited (datetime): Timestamp when the article was last edited. is_published (bool): Flag indicating if the article is published. Relationships: author (Writer): Many-to-one relationship with the Writer model.","title":"Models"},{"location":"models/#models-documentation","text":"This document describes the data models used in the Aqsam application.","title":"Models Documentation"},{"location":"models/#user","text":"Represents a user account in the system. Attributes: id (int): Unique identifier for the user. username (str): Unique username for the user. password (str): Hashed password for the user. role (str): Role of the user (e.g., 'admin', 'teacher', 'student', 'writer'). email (str): User's email address. first_name (str): User's first name. last_name (str): User's last name. birth_date (date): User's birth date. phone_number (str): User's phone number. profile_picture_filename (str): Filename of the user's profile picture. Stored in assets/profile_pictures. email_verified (bool): Indicates if the user's email is verified. email_verification_token (str): Token for email verification. email_verification_expiry (datetime): Expiry time for the email verification token. password_reset_token (str): Token for password reset. password_reset_expiry (datetime): Expiry time for the password reset token. activated (bool): Indicates if the user's account is activated. Relationships: student (Student): One-to-one relationship with the Student model. teacher (Teacher): One-to-one relationship with the Teacher model. writer (Writer): One-to-one relationship with the Writer model.","title":"User"},{"location":"models/#student","text":"Represents a student in the system. Attributes: id (int): Unique identifier for the student (foreign key to User). class_id (int): Identifier for the class the student is enrolled in (foreign key to Class). Relationships: user (User): One-to-one relationship with the User model. class_ (Class): Many-to-one relationship with the Class model. grades (Grade): One-to-many relationship with the Grade model.","title":"Student"},{"location":"models/#teacher","text":"Represents a teacher in the system. Attributes: id (int): Unique identifier for the teacher (foreign key to User). Relationships: subjects (list of Subject): Many-to-many relationship with the Subject model. classes (list of Class): Many-to-many relationship with the Class model. grades (list of Grade): One-to-many relationship with the Grade model. user (User): One-to-one relationship with the User model.","title":"Teacher"},{"location":"models/#class","text":"Represents a class or grade level. Attributes: id (int): Unique identifier for the class. name (str): Name of the class (e.g., \"A\"). level (str): Grade level (e.g., \"3rd Year\"). Relationships: students (list of Student): One-to-many relationship with the Student model. teachers (list of Teacher): Many-to-many relationship with the Teacher model.","title":"Class"},{"location":"models/#subject","text":"Represents a subject. Attributes: id (int): Unique identifier for the subject. name (str): Name of the subject. Relationships: teachers (list of Teacher): Many-to-many relationship with the Teacher model. grades (list of Grade): One-to-many relationship with the Grade model.","title":"Subject"},{"location":"models/#grade","text":"Represents a student's grade in a subject. Attributes: id (int): Unique identifier for the grade. student_id (int): Foreign key referencing the student. subject_id (int): Foreign key referencing the subject. teacher_id (int): Foreign key referencing the teacher. grade (float): The grade value. date (datetime): The date when the grade was assigned. comment (str): Optional comment about the grade. Relationships: student (Student): Many-to-one relationship with the Student model. subject (Subject): Many-to-one relationship with the Subject model. teacher (Teacher): Many-to-one relationship with the Teacher model.","title":"Grade"},{"location":"models/#writer","text":"Represents a writer in the system. Attributes: id (int): Unique identifier for the writer (foreign key to User). Relationships: user (User): One-to-one relationship with the User model. articles (list of Article): One-to-many relationship with the Article model.","title":"Writer"},{"location":"models/#article","text":"Represents an article written by a writer. Attributes: id (int): Unique identifier for the article. title (str): Title of the article. author_id (int): ID of the author (writer). content_md (str): Content of the article in Markdown format. created_at (datetime): Timestamp when the article was created. last_edited (datetime): Timestamp when the article was last edited. is_published (bool): Flag indicating if the article is published. Relationships: author (Writer): Many-to-one relationship with the Writer model.","title":"Article"},{"location":"service_functions/","text":"Service Functions This document provides comprehensive documentation for all service functions in the Aqsam application, including concrete examples and important notes for developers. Use to the table of contents located on the left side for quick navigation. User Services User services handle core user management functionality, including account creation, verification, and authentication. get_user_by_id(user_id: int) -> Optional[User] Retrieves a user by their ID. Example: user = get_user_by_id(1) if user: print(f\"Found user: {user.username}\") else: print(\"User not found\") get_student_by_id(student_id: int) -> Optional[Student] Retrieves a student by their ID. Example: student = get_student_by_id(1) if student: print(f\"Found student: {student.user.username}\") else: print(\"Student not found\") get_teacher_by_id(teacher_id: int) -> Optional[Teacher] Retrieves a teacher by their ID. Example: teacher = get_teacher_by_id(1) if teacher: print(f\"Found teacher: {teacher.user.username}\") else: print(\"Teacher not found\") get_writer_by_id(writer_id: int) -> Optional[Writer] Retrieves a writer by their ID. Example: writer = get_writer_by_id(1) if writer: print(f\"Found writer: {writer.user.username}\") else: print(\"Writer not found\") get_user_by_email(email: str) -> Optional[User] Retrieves a user by their email address. Example: user = get_user_by_email(\"john.doe@example.com\") if user: print(f\"Found user: {user.username}\") else: print(\"User not found\") get_user_by_username(username: str) -> Optional[User] Retrieves a user by their username. Example: user = get_user_by_username(\"johndoe\") if user: print(f\"Found user: {user.id}\") else: print(\"User not found\") get_users_by_role(role: str) -> List[User] Retrieves all users with a specific role. Example: teachers = get_users_by_role(\"teacher\") print(f\"Found {len(teachers)} teachers\") delete_user(user: User) -> bool Soft deletes a user by setting their activated flag to False . \u26a0\ufe0f Warning: This is a soft delete that deactivates the user but keeps their record in the database. Example: user = get_user_by_id(1) if delete_user(user): print(\"User deactivated successfully\") else: print(\"Failed to deactivate user\") generate_email_verification_token(user: User, expiry_hours: int = 24) -> str Generates a token for email verification. Example: user = get_user_by_id(1) token = generate_email_verification_token(user) print(f\"Verification token: {token}\") # Send this token in an email to the user verify_email(token: str) -> Optional[User] Verifies a user's email using a verification token. Example: user = verify_email(\"verification_token_from_email\") if user: print(\"Email verified successfully\") else: print(\"Invalid or expired verification token\") generate_password_reset_token(user: User, expiry_hours: int = 1) -> str Generates a token for password reset. Example: user = get_user_by_email(\"user@example.com\") token = generate_password_reset_token(user) print(f\"Password reset token: {token}\") # Send this token to user's email reset_password(token: str, new_password: str) -> Optional[User] Resets a user's password using a reset token. Example: user = reset_password(\"reset_token_from_email\", \"new_secure_password\") if user: print(\"Password reset successfully\") else: print(\"Invalid or expired reset token\") activate_user(user: User) -> bool Activates a user account. Example: user = get_user_by_id(1) if activate_user(user): print(\"User activated successfully\") deactivate_user(user: User) -> bool Deactivates a user account. Example: user = get_user_by_id(1) if deactivate_user(user): print(\"User deactivated successfully\") is_account_active(user: User) -> bool Checks if a user account is active. Example: user = get_user_by_id(1) if is_account_active(user): print(\"User account is active\") else: print(\"User account is deactivated\") create_user(username: str, password: str, role: str, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None) -> User Creates a new user. \u26a0\ufe0f Note: The birth_date parameter should be provided as a string in 'YYYY-MM-DD' format, which will be converted to a date object internally. \u26a0\ufe0f Note: The profile_picture_filename parameter present in the User Model can only be changed after the creation of the user. By default, the profile picture filename is set to NULL and replaced by a placeholder on the frontend. Example: user = create_user( username=\"johndoe\", password=\"secure_password\", role=\"student\", email=\"john.doe@example.com\", first_name=\"John\", last_name=\"Doe\", birth_date=\"1995-05-15\", phone_number=\"+1234567890\" ) print(f\"Created new user with ID: {user.id}\") set_user_pfp(user_id: int, pfp_filename: str) -> bool Sets the user's profile picture to the indicated filename stored in assets/profile_pictures. Student Services Student services manage student-specific operations. create_student(username: str, password: str, role: str, email: str, first_name: str, last_name: str, birth_date: str, phone_number: str, class_id: Optional[int] = None) -> Student Creates a new student. \u26a0\ufe0f Warning: Despite the role parameter, this function always sets the role to \"student\" in the create_user call. Example: student = create_student( username=\"student1\", password=\"secure_password\", role=\"student\", # This parameter is ignored and always set to \"student\" email=\"student@example.com\", first_name=\"Jane\", last_name=\"Smith\", birth_date=\"2005-10-15\", # Format: YYYY-MM-DD phone_number=\"+1234567890\", class_id=3 # Optional class ID ) print(f\"Created student with ID: {student.id}\") update_student(student_id: int, username: Optional[str] = None, password: Optional[str] = None, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None, class_id: Optional[int] = None) -> Student Updates a student's information. Example: updated_student = update_student( student_id=1, email=\"new.email@example.com\", phone_number=\"+9876543210\", class_id=4 ) if updated_student: print(\"Student updated successfully\") else: print(\"Student not found\") get_all_student_by_class_id(class_id: int) -> List[Student] Retrieves all students in a specific class. Example: students = get_all_student_by_class_id(3) print(f\"Found {len(students)} students in the class\") for student in students: print(f\"- {student.user.first_name} {student.user.last_name}\") Teacher Services Teacher services manage teacher-specific operations. create_teacher(username: str, password: str, email: str, first_name: str, last_name: str, birth_date: str, phone_number: str, subjects: List = None, classes: List = None) -> Teacher Creates a new teacher. Example: # First, get subjects and classes if you want to associate them math_subject = get_subject_by_name(\"Mathematics\") physics_subject = get_subject_by_name(\"Physics\") class_9a = get_class_by_name(\"9A\") teacher = create_teacher( username=\"mssmith\", password=\"secure_password\", email=\"teacher@example.com\", first_name=\"Mary\", last_name=\"Smith\", birth_date=\"1980-05-12\", # Format: YYYY-MM-DD phone_number=\"+1234567890\", subjects=[math_subject, physics_subject], # Optional classes=[class_9a] # Optional ) print(f\"Created teacher with ID: {teacher.id}\") update_teacher(teacher_id: int, **kwargs) -> Optional[Teacher] Updates a teacher's information using keyword arguments. Example: updated_teacher = update_teacher( teacher_id=1, username=\"msmith_new\", email=\"mary.smith@newschool.edu\", phone_number=\"+9876543210\" ) if updated_teacher: print(\"Teacher updated successfully\") else: print(\"Teacher not found\") add_subject_to_teacher(teacher_id: int, subject) -> Optional[Teacher] Adds a subject to a teacher's list of subjects. Example: chemistry = get_subject_by_name(\"Chemistry\") teacher = add_subject_to_teacher(1, chemistry) if teacher: print(f\"Added Chemistry to teacher's subjects. Now teaches {len(teacher.subjects)} subjects\") remove_subject_from_teacher(teacher_id: int, subject) -> Optional[Teacher] Removes a subject from a teacher's list of subjects. Example: physics = get_subject_by_name(\"Physics\") teacher = remove_subject_from_teacher(1, physics) if teacher: print(f\"Removed Physics from teacher's subjects\") add_class_to_teacher(teacher_id: int, class_obj) -> Optional[Teacher] Adds a class to a teacher's list of classes. Example: class_10b = get_class_by_name(\"10B\") teacher = add_class_to_teacher(1, class_10b) if teacher: print(f\"Added class 10B to teacher. Now teaches {len(teacher.classes)} classes\") remove_class_from_teacher(teacher_id: int, class_obj) -> Optional[Teacher] Removes a class from a teacher's list of classes. Example: class_9a = get_class_by_name(\"9A\") teacher = remove_class_from_teacher(1, class_9a) if teacher: print(f\"Removed class 9A from teacher\") get_teachers_by_subject(subject) -> List[Teacher] Retrieves all teachers who teach a specific subject. Example: math = get_subject_by_name(\"Mathematics\") teachers = get_teachers_by_subject(math) print(f\"Found {len(teachers)} teachers who teach Mathematics\") Writer Services Writer services manage writer-specific operations. create_writer(username: Optional[str] = None, password: Optional[str] = None, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None) -> Writer Creates a new writer. \u26a0\ufe0f Warning: All parameters are marked as optional, but some may actually be required by the underlying create_user function. Example: writer = create_writer( username=\"journalist1\", password=\"secure_password\", email=\"writer@magazine.com\", first_name=\"James\", last_name=\"Johnson\", birth_date=\"1988-07-23\", # Format: YYYY-MM-DD phone_number=\"+1234567890\" ) print(f\"Created writer with ID: {writer.id}\") update_writer(writer_id: int, username: Optional[str] = None, password: Optional[str] = None, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None) -> Writer Updates a writer's information. Example: updated_writer = update_writer( writer_id=1, username=\"jjohnson_senior\", email=\"james.johnson@magazine.com\", phone_number=\"+9876543210\" ) if updated_writer: print(\"Writer updated successfully\") else: print(\"Writer not found\") get_all_authored_articles(writer_id: int) -> List[Article] Retrieves all articles authored by a specific writer. Example: articles = get_all_authored_articles(1) print(f\"Writer has authored {len(articles)} articles\") for article in articles: print(f\"- {article.title} ({'Published' if article.is_published else 'Draft'})\") Article Services Article services manage operations related to articles. create_article(title: str, content_md: str, author_id: int, is_published: Optional[bool] = False) -> Article Creates a new article. Example: article = create_article( title=\"Understanding Machine Learning\", content_md=\"# Introduction\\nMachine learning is a fascinating field...\", author_id=1, is_published=False # Default is draft (not published) ) print(f\"Created article with ID: {article.id}\") update_article(article_id: int, title: Optional[str] = None, author_id: Optional[int] = None, content_md: Optional[str] = None, is_published: Optional[bool] = None) -> Article Updates an article's information. Example: updated_article = update_article( article_id=1, title=\"Advanced Machine Learning Concepts\", content_md=\"# Updated Introduction\\nMachine learning has evolved...\", is_published=True # Publish the article ) if updated_article: print(f\"Article updated and published on {updated_article.last_edited}\") else: print(\"Article not found\") delete_article(article_id: int) -> bool Deletes an article. \u26a0\ufe0f Warning: This is a hard delete that completely removes the article from the database. Example: if delete_article(1): print(\"Article deleted successfully\") else: print(\"Article not found or could not be deleted\") Class Services Class services manage operations related to school classes. create_class(name: str, level: str) -> Optional[Class] Creates a new class. Example: class_obj = create_class( name=\"9A\", level=\"Grade 9\" ) print(f\"Created class with ID: {class_obj.id}\") update_class(class_id: int, name: Optional[str] = None, level: Optional[str] = None) -> Optional[Class] Updates a class's information. Example: updated_class = update_class( class_id=1, name=\"9B\", level=\"Grade 9 Advanced\" ) if updated_class: print(\"Class updated successfully\") else: print(\"Class not found\") delete_class(class_id: int) -> bool Deletes a class. \u26a0\ufe0f Warning: This is a hard delete that completely removes the class from the database. Consider the impact on related students and teachers before deletion. Example: if delete_class(1): print(\"Class deleted successfully\") else: print(\"Class not found or could not be deleted\") get_class_by_id(class_id: int) -> Optional[Class] Retrieves a class by its ID. Example: class_obj = get_class_by_id(1) if class_obj: print(f\"Found class: {class_obj.name}, Level: {class_obj.level}\") else: print(\"Class not found\") get_class_by_name(name: str) -> Optional[Class] Retrieves a class by its name. Example: class_obj = get_class_by_name(\"9A\") if class_obj: print(f\"Found class ID: {class_obj.id}, Level: {class_obj.level}\") else: print(\"Class not found\") get_classes_by_level(level: str) -> List[Class] Retrieves all classes at a specific level. Example: classes = get_classes_by_level(\"Grade 9\") print(f\"Found {len(classes)} classes at Grade 9 level\") for class_obj in classes: print(f\"- {class_obj.name}\") get_all_classes() -> List[Class] Retrieves all classes. Example: classes = get_all_classes() print(f\"Total classes: {len(classes)}\") add_teacher_to_class(class_id: int, teacher_id: int) -> Optional[Class] Adds a teacher to a class. Example: class_obj = add_teacher_to_class(1, 2) if class_obj: print(f\"Teacher assigned to class {class_obj.name}\") else: print(\"Class or teacher not found\") remove_teacher_from_class(class_id: int, teacher_id: int) -> Optional[Class] Removes a teacher from a class. Example: class_obj = remove_teacher_from_class(1, 2) if class_obj: print(f\"Teacher removed from class {class_obj.name}\") else: print(\"Class or teacher not found, or teacher not assigned to class\") get_classes_by_teacher(teacher_id: int) -> List[Class] Retrieves all classes taught by a specific teacher. Example: classes = get_classes_by_teacher(1) print(f\"Teacher teaches {len(classes)} classes\") for class_obj in classes: print(f\"- {class_obj.name}\") get_student_count_in_class(class_id: int) -> int Gets the number of students in a class. Example: count = get_student_count_in_class(1) print(f\"Class has {count} students enrolled\") Subject Services Subject services manage operations related to academic subjects. create_subject(name: str) -> Optional[Subject] Creates a new subject. Example: subject = create_subject(\"Physics\") if subject: print(f\"Created subject with ID: {subject.id}\") else: print(\"Failed to create subject\") update_subject(subject_id: int, name: Optional[str] = None) -> Optional[Subject] Updates a subject's information. Example: updated_subject = update_subject( subject_id=1, name=\"Advanced Physics\" ) if updated_subject: print(\"Subject updated successfully\") else: print(\"Subject not found\") delete_subject(subject_id: int) -> bool Deletes a subject. \u26a0\ufe0f Warning: This is a hard delete that completely removes the subject from the database. Consider the impact on related grades and teachers before deletion. Example: if delete_subject(1): print(\"Subject deleted successfully\") else: print(\"Subject not found or could not be deleted\") get_subject_by_id(subject_id: int) -> Optional[Subject] Retrieves a subject by its ID. Example: subject = get_subject_by_id(1) if subject: print(f\"Found subject: {subject.name}\") else: print(\"Subject not found\") get_subject_by_name(name: str) -> Optional[Subject] Retrieves a subject by its name. Example: subject = get_subject_by_name(\"Mathematics\") if subject: print(f\"Found subject ID: {subject.id}\") else: print(\"Subject not found\") Grade Services Grade services manage operations related to student grades. create_grade(student_id: int, subject_id: int, teacher_id: int, grade: float, comment: Optional[str] = None) -> Optional[Grade] Creates a new grade for a student. Example: new_grade = create_grade( student_id=1, subject_id=2, teacher_id=3, grade=85.5, comment=\"Excellent work on the project\" ) if new_grade: print(f\"Created grade entry with ID: {new_grade.id}\") else: print(\"Failed to create grade entry\") update_grade(grade_id: int, grade: Optional[float] = None, comment: Optional[str] = None) -> Optional[Grade] Updates a grade's information. Example: updated_grade = update_grade( grade_id=1, grade=88.0, comment=\"After review, grade adjusted upward\" ) if updated_grade: print(\"Grade updated successfully\") else: print(\"Grade entry not found\") delete_grade(grade_id: int) -> bool Deletes a grade. Example: if delete_grade(1): print(\"Grade deleted successfully\") else: print(\"Grade not found or could not be deleted\") get_grade_by_id(grade_id: int) -> Optional[Grade] Retrieves a grade by its ID. Example: grade = get_grade_by_id(1) if grade: print(f\"Grade: {grade.grade}, Subject: {grade.subject.name}\") else: print(\"Grade not found\") get_grades_by_student(student_id: int) -> List[Grade] Retrieves all grades for a specific student. Example: grades = get_grades_by_student(1) print(f\"Student has {len(grades)} grade entries\") for grade in grades: print(f\"- {grade.subject.name}: {grade.grade}\") get_grades_by_subject(subject_id: int) -> List[Grade] Retrieves all grades for a specific subject. Example: grades = get_grades_by_subject(1) print(f\"Subject has {len(grades)} grade entries\") get_grades_by_teacher(teacher_id: int) -> List[Grade] Retrieves all grades assigned by a specific teacher. Example: grades = get_grades_by_teacher(1) print(f\"Teacher has assigned {len(grades)} grades\") get_grades_by_student_and_subject(student_id: int, subject_id: int) -> List[Grade] Retrieves all grades for a student in a specific subject. Example: grades = get_grades_by_student_and_subject(1, 2) print(f\"Found {len(grades)} grade entries for the student in this subject\") for grade in grades: print(f\"- {grade.date.strftime('%Y-%m-%d')}: {grade.grade}\") get_average_grade_by_student(student_id: int) -> Optional[float] Gets the average grade for a student across all subjects. Example: avg = get_average_grade_by_student(1) if avg: print(f\"Student's average grade: {avg:.2f}\") else: print(\"No grades found for the student\") get_average_grade_by_subject(subject_id: int) -> Optional[float] Gets the average grade for a subject across all students. Example: avg = get_average_grade_by_subject(1) if avg: print(f\"Subject's average grade: {avg:.2f}\") else: print(\"No grades found for the subject\") get_student_subject_grades_summary(student_id: int) -> Dict[str, Any] Gets a summary of grades for a student grouped by subject. Example: summary = get_student_subject_grades_summary(1) print(\"Grade summary by subject:\") for subject, data in summary.items(): print(f\"- {subject}: Average = {data['average']:.2f}\") print(f\" All grades: {data['grades']}\") get_recent_grades(limit: int = 10) -> List[Grade] Gets the most recent grades. Example: recent = get_recent_grades(5) # Get 5 most recent grades print(\"Recent grades:\") for grade in recent: print(f\"- {grade.student.user.first_name} {grade.student.user.last_name}: \" + f\"{grade.subject.name} - {grade.grade} \" + f\"({grade.date.strftime('%Y-%m-%d')})\") Common Patterns and Best Practices Error Handling : Most functions return None or False when an operation fails (e.g., item not found). Always check return values. Date Handling : Date strings should be in 'YYYY-MM-DD' format. The utility functions format_date and format_date_to_obj handle conversions. Transactions : All database operations use Flask-SQLAlchemy's session management. Modifications are committed automatically at the end of functions. Parameter Types : Be mindful of parameter types. Some functions expect objects (like a Teacher or Subject instance) while others expect IDs. Soft vs Hard Deletes : User deletion is implemented as a soft delete (deactivation), while other entities use hard deletes. Consider the implications before deleting data.","title":"Services"},{"location":"service_functions/#service-functions","text":"This document provides comprehensive documentation for all service functions in the Aqsam application, including concrete examples and important notes for developers. Use to the table of contents located on the left side for quick navigation.","title":"Service Functions"},{"location":"service_functions/#user-services","text":"User services handle core user management functionality, including account creation, verification, and authentication.","title":"User Services"},{"location":"service_functions/#get_user_by_iduser_id-int-optionaluser","text":"Retrieves a user by their ID. Example: user = get_user_by_id(1) if user: print(f\"Found user: {user.username}\") else: print(\"User not found\")","title":"get_user_by_id(user_id: int) -&gt; Optional[User]"},{"location":"service_functions/#get_student_by_idstudent_id-int-optionalstudent","text":"Retrieves a student by their ID. Example: student = get_student_by_id(1) if student: print(f\"Found student: {student.user.username}\") else: print(\"Student not found\")","title":"get_student_by_id(student_id: int) -&gt; Optional[Student]"},{"location":"service_functions/#get_teacher_by_idteacher_id-int-optionalteacher","text":"Retrieves a teacher by their ID. Example: teacher = get_teacher_by_id(1) if teacher: print(f\"Found teacher: {teacher.user.username}\") else: print(\"Teacher not found\")","title":"get_teacher_by_id(teacher_id: int) -&gt; Optional[Teacher]"},{"location":"service_functions/#get_writer_by_idwriter_id-int-optionalwriter","text":"Retrieves a writer by their ID. Example: writer = get_writer_by_id(1) if writer: print(f\"Found writer: {writer.user.username}\") else: print(\"Writer not found\")","title":"get_writer_by_id(writer_id: int) -&gt; Optional[Writer]"},{"location":"service_functions/#get_user_by_emailemail-str-optionaluser","text":"Retrieves a user by their email address. Example: user = get_user_by_email(\"john.doe@example.com\") if user: print(f\"Found user: {user.username}\") else: print(\"User not found\")","title":"get_user_by_email(email: str) -&gt; Optional[User]"},{"location":"service_functions/#get_user_by_usernameusername-str-optionaluser","text":"Retrieves a user by their username. Example: user = get_user_by_username(\"johndoe\") if user: print(f\"Found user: {user.id}\") else: print(\"User not found\")","title":"get_user_by_username(username: str) -&gt; Optional[User]"},{"location":"service_functions/#get_users_by_rolerole-str-listuser","text":"Retrieves all users with a specific role. Example: teachers = get_users_by_role(\"teacher\") print(f\"Found {len(teachers)} teachers\")","title":"get_users_by_role(role: str) -&gt; List[User]"},{"location":"service_functions/#delete_useruser-user-bool","text":"Soft deletes a user by setting their activated flag to False . \u26a0\ufe0f Warning: This is a soft delete that deactivates the user but keeps their record in the database. Example: user = get_user_by_id(1) if delete_user(user): print(\"User deactivated successfully\") else: print(\"Failed to deactivate user\")","title":"delete_user(user: User) -&gt; bool"},{"location":"service_functions/#generate_email_verification_tokenuser-user-expiry_hours-int-24-str","text":"Generates a token for email verification. Example: user = get_user_by_id(1) token = generate_email_verification_token(user) print(f\"Verification token: {token}\") # Send this token in an email to the user","title":"generate_email_verification_token(user: User, expiry_hours: int = 24) -&gt; str"},{"location":"service_functions/#verify_emailtoken-str-optionaluser","text":"Verifies a user's email using a verification token. Example: user = verify_email(\"verification_token_from_email\") if user: print(\"Email verified successfully\") else: print(\"Invalid or expired verification token\")","title":"verify_email(token: str) -&gt; Optional[User]"},{"location":"service_functions/#generate_password_reset_tokenuser-user-expiry_hours-int-1-str","text":"Generates a token for password reset. Example: user = get_user_by_email(\"user@example.com\") token = generate_password_reset_token(user) print(f\"Password reset token: {token}\") # Send this token to user's email","title":"generate_password_reset_token(user: User, expiry_hours: int = 1) -&gt; str"},{"location":"service_functions/#reset_passwordtoken-str-new_password-str-optionaluser","text":"Resets a user's password using a reset token. Example: user = reset_password(\"reset_token_from_email\", \"new_secure_password\") if user: print(\"Password reset successfully\") else: print(\"Invalid or expired reset token\")","title":"reset_password(token: str, new_password: str) -&gt; Optional[User]"},{"location":"service_functions/#activate_useruser-user-bool","text":"Activates a user account. Example: user = get_user_by_id(1) if activate_user(user): print(\"User activated successfully\")","title":"activate_user(user: User) -&gt; bool"},{"location":"service_functions/#deactivate_useruser-user-bool","text":"Deactivates a user account. Example: user = get_user_by_id(1) if deactivate_user(user): print(\"User deactivated successfully\")","title":"deactivate_user(user: User) -&gt; bool"},{"location":"service_functions/#is_account_activeuser-user-bool","text":"Checks if a user account is active. Example: user = get_user_by_id(1) if is_account_active(user): print(\"User account is active\") else: print(\"User account is deactivated\")","title":"is_account_active(user: User) -&gt; bool"},{"location":"service_functions/#create_userusername-str-password-str-role-str-email-optionalstr-none-first_name-optionalstr-none-last_name-optionalstr-none-birth_date-optionalstr-none-phone_number-optionalstr-none-user","text":"Creates a new user. \u26a0\ufe0f Note: The birth_date parameter should be provided as a string in 'YYYY-MM-DD' format, which will be converted to a date object internally. \u26a0\ufe0f Note: The profile_picture_filename parameter present in the User Model can only be changed after the creation of the user. By default, the profile picture filename is set to NULL and replaced by a placeholder on the frontend. Example: user = create_user( username=\"johndoe\", password=\"secure_password\", role=\"student\", email=\"john.doe@example.com\", first_name=\"John\", last_name=\"Doe\", birth_date=\"1995-05-15\", phone_number=\"+1234567890\" ) print(f\"Created new user with ID: {user.id}\")","title":"create_user(username: str, password: str, role: str, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None) -&gt; User"},{"location":"service_functions/#set_user_pfpuser_id-int-pfp_filename-str-bool","text":"Sets the user's profile picture to the indicated filename stored in assets/profile_pictures.","title":"set_user_pfp(user_id: int, pfp_filename: str) -&gt; bool"},{"location":"service_functions/#student-services","text":"Student services manage student-specific operations.","title":"Student Services"},{"location":"service_functions/#create_studentusername-str-password-str-role-str-email-str-first_name-str-last_name-str-birth_date-str-phone_number-str-class_id-optionalint-none-student","text":"Creates a new student. \u26a0\ufe0f Warning: Despite the role parameter, this function always sets the role to \"student\" in the create_user call. Example: student = create_student( username=\"student1\", password=\"secure_password\", role=\"student\", # This parameter is ignored and always set to \"student\" email=\"student@example.com\", first_name=\"Jane\", last_name=\"Smith\", birth_date=\"2005-10-15\", # Format: YYYY-MM-DD phone_number=\"+1234567890\", class_id=3 # Optional class ID ) print(f\"Created student with ID: {student.id}\")","title":"create_student(username: str, password: str, role: str, email: str, first_name: str, last_name: str, birth_date: str, phone_number: str, class_id: Optional[int] = None) -&gt; Student"},{"location":"service_functions/#update_studentstudent_id-int-username-optionalstr-none-password-optionalstr-none-email-optionalstr-none-first_name-optionalstr-none-last_name-optionalstr-none-birth_date-optionalstr-none-phone_number-optionalstr-none-class_id-optionalint-none-student","text":"Updates a student's information. Example: updated_student = update_student( student_id=1, email=\"new.email@example.com\", phone_number=\"+9876543210\", class_id=4 ) if updated_student: print(\"Student updated successfully\") else: print(\"Student not found\")","title":"update_student(student_id: int, username: Optional[str] = None, password: Optional[str] = None, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None, class_id: Optional[int] = None) -&gt; Student"},{"location":"service_functions/#get_all_student_by_class_idclass_id-int-liststudent","text":"Retrieves all students in a specific class. Example: students = get_all_student_by_class_id(3) print(f\"Found {len(students)} students in the class\") for student in students: print(f\"- {student.user.first_name} {student.user.last_name}\")","title":"get_all_student_by_class_id(class_id: int) -&gt; List[Student]"},{"location":"service_functions/#teacher-services","text":"Teacher services manage teacher-specific operations.","title":"Teacher Services"},{"location":"service_functions/#create_teacherusername-str-password-str-email-str-first_name-str-last_name-str-birth_date-str-phone_number-str-subjects-list-none-classes-list-none-teacher","text":"Creates a new teacher. Example: # First, get subjects and classes if you want to associate them math_subject = get_subject_by_name(\"Mathematics\") physics_subject = get_subject_by_name(\"Physics\") class_9a = get_class_by_name(\"9A\") teacher = create_teacher( username=\"mssmith\", password=\"secure_password\", email=\"teacher@example.com\", first_name=\"Mary\", last_name=\"Smith\", birth_date=\"1980-05-12\", # Format: YYYY-MM-DD phone_number=\"+1234567890\", subjects=[math_subject, physics_subject], # Optional classes=[class_9a] # Optional ) print(f\"Created teacher with ID: {teacher.id}\")","title":"create_teacher(username: str, password: str, email: str, first_name: str, last_name: str, birth_date: str, phone_number: str, subjects: List = None, classes: List = None) -&gt; Teacher"},{"location":"service_functions/#update_teacherteacher_id-int-kwargs-optionalteacher","text":"Updates a teacher's information using keyword arguments. Example: updated_teacher = update_teacher( teacher_id=1, username=\"msmith_new\", email=\"mary.smith@newschool.edu\", phone_number=\"+9876543210\" ) if updated_teacher: print(\"Teacher updated successfully\") else: print(\"Teacher not found\")","title":"update_teacher(teacher_id: int, **kwargs) -&gt; Optional[Teacher]"},{"location":"service_functions/#add_subject_to_teacherteacher_id-int-subject-optionalteacher","text":"Adds a subject to a teacher's list of subjects. Example: chemistry = get_subject_by_name(\"Chemistry\") teacher = add_subject_to_teacher(1, chemistry) if teacher: print(f\"Added Chemistry to teacher's subjects. Now teaches {len(teacher.subjects)} subjects\")","title":"add_subject_to_teacher(teacher_id: int, subject) -&gt; Optional[Teacher]"},{"location":"service_functions/#remove_subject_from_teacherteacher_id-int-subject-optionalteacher","text":"Removes a subject from a teacher's list of subjects. Example: physics = get_subject_by_name(\"Physics\") teacher = remove_subject_from_teacher(1, physics) if teacher: print(f\"Removed Physics from teacher's subjects\")","title":"remove_subject_from_teacher(teacher_id: int, subject) -&gt; Optional[Teacher]"},{"location":"service_functions/#add_class_to_teacherteacher_id-int-class_obj-optionalteacher","text":"Adds a class to a teacher's list of classes. Example: class_10b = get_class_by_name(\"10B\") teacher = add_class_to_teacher(1, class_10b) if teacher: print(f\"Added class 10B to teacher. Now teaches {len(teacher.classes)} classes\")","title":"add_class_to_teacher(teacher_id: int, class_obj) -&gt; Optional[Teacher]"},{"location":"service_functions/#remove_class_from_teacherteacher_id-int-class_obj-optionalteacher","text":"Removes a class from a teacher's list of classes. Example: class_9a = get_class_by_name(\"9A\") teacher = remove_class_from_teacher(1, class_9a) if teacher: print(f\"Removed class 9A from teacher\")","title":"remove_class_from_teacher(teacher_id: int, class_obj) -&gt; Optional[Teacher]"},{"location":"service_functions/#get_teachers_by_subjectsubject-listteacher","text":"Retrieves all teachers who teach a specific subject. Example: math = get_subject_by_name(\"Mathematics\") teachers = get_teachers_by_subject(math) print(f\"Found {len(teachers)} teachers who teach Mathematics\")","title":"get_teachers_by_subject(subject) -&gt; List[Teacher]"},{"location":"service_functions/#writer-services","text":"Writer services manage writer-specific operations.","title":"Writer Services"},{"location":"service_functions/#create_writerusername-optionalstr-none-password-optionalstr-none-email-optionalstr-none-first_name-optionalstr-none-last_name-optionalstr-none-birth_date-optionalstr-none-phone_number-optionalstr-none-writer","text":"Creates a new writer. \u26a0\ufe0f Warning: All parameters are marked as optional, but some may actually be required by the underlying create_user function. Example: writer = create_writer( username=\"journalist1\", password=\"secure_password\", email=\"writer@magazine.com\", first_name=\"James\", last_name=\"Johnson\", birth_date=\"1988-07-23\", # Format: YYYY-MM-DD phone_number=\"+1234567890\" ) print(f\"Created writer with ID: {writer.id}\")","title":"create_writer(username: Optional[str] = None, password: Optional[str] = None, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None) -&gt; Writer"},{"location":"service_functions/#update_writerwriter_id-int-username-optionalstr-none-password-optionalstr-none-email-optionalstr-none-first_name-optionalstr-none-last_name-optionalstr-none-birth_date-optionalstr-none-phone_number-optionalstr-none-writer","text":"Updates a writer's information. Example: updated_writer = update_writer( writer_id=1, username=\"jjohnson_senior\", email=\"james.johnson@magazine.com\", phone_number=\"+9876543210\" ) if updated_writer: print(\"Writer updated successfully\") else: print(\"Writer not found\")","title":"update_writer(writer_id: int, username: Optional[str] = None, password: Optional[str] = None, email: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None, birth_date: Optional[str] = None, phone_number: Optional[str] = None) -&gt; Writer"},{"location":"service_functions/#get_all_authored_articleswriter_id-int-listarticle","text":"Retrieves all articles authored by a specific writer. Example: articles = get_all_authored_articles(1) print(f\"Writer has authored {len(articles)} articles\") for article in articles: print(f\"- {article.title} ({'Published' if article.is_published else 'Draft'})\")","title":"get_all_authored_articles(writer_id: int) -&gt; List[Article]"},{"location":"service_functions/#article-services","text":"Article services manage operations related to articles.","title":"Article Services"},{"location":"service_functions/#create_articletitle-str-content_md-str-author_id-int-is_published-optionalbool-false-article","text":"Creates a new article. Example: article = create_article( title=\"Understanding Machine Learning\", content_md=\"# Introduction\\nMachine learning is a fascinating field...\", author_id=1, is_published=False # Default is draft (not published) ) print(f\"Created article with ID: {article.id}\")","title":"create_article(title: str, content_md: str, author_id: int, is_published: Optional[bool] = False) -&gt; Article"},{"location":"service_functions/#update_articlearticle_id-int-title-optionalstr-none-author_id-optionalint-none-content_md-optionalstr-none-is_published-optionalbool-none-article","text":"Updates an article's information. Example: updated_article = update_article( article_id=1, title=\"Advanced Machine Learning Concepts\", content_md=\"# Updated Introduction\\nMachine learning has evolved...\", is_published=True # Publish the article ) if updated_article: print(f\"Article updated and published on {updated_article.last_edited}\") else: print(\"Article not found\")","title":"update_article(article_id: int, title: Optional[str] = None, author_id: Optional[int] = None, content_md: Optional[str] = None, is_published: Optional[bool] = None) -&gt; Article"},{"location":"service_functions/#delete_articlearticle_id-int-bool","text":"Deletes an article. \u26a0\ufe0f Warning: This is a hard delete that completely removes the article from the database. Example: if delete_article(1): print(\"Article deleted successfully\") else: print(\"Article not found or could not be deleted\")","title":"delete_article(article_id: int) -&gt; bool"},{"location":"service_functions/#class-services","text":"Class services manage operations related to school classes.","title":"Class Services"},{"location":"service_functions/#create_classname-str-level-str-optionalclass","text":"Creates a new class. Example: class_obj = create_class( name=\"9A\", level=\"Grade 9\" ) print(f\"Created class with ID: {class_obj.id}\")","title":"create_class(name: str, level: str) -&gt; Optional[Class]"},{"location":"service_functions/#update_classclass_id-int-name-optionalstr-none-level-optionalstr-none-optionalclass","text":"Updates a class's information. Example: updated_class = update_class( class_id=1, name=\"9B\", level=\"Grade 9 Advanced\" ) if updated_class: print(\"Class updated successfully\") else: print(\"Class not found\")","title":"update_class(class_id: int, name: Optional[str] = None, level: Optional[str] = None) -&gt; Optional[Class]"},{"location":"service_functions/#delete_classclass_id-int-bool","text":"Deletes a class. \u26a0\ufe0f Warning: This is a hard delete that completely removes the class from the database. Consider the impact on related students and teachers before deletion. Example: if delete_class(1): print(\"Class deleted successfully\") else: print(\"Class not found or could not be deleted\")","title":"delete_class(class_id: int) -&gt; bool"},{"location":"service_functions/#get_class_by_idclass_id-int-optionalclass","text":"Retrieves a class by its ID. Example: class_obj = get_class_by_id(1) if class_obj: print(f\"Found class: {class_obj.name}, Level: {class_obj.level}\") else: print(\"Class not found\")","title":"get_class_by_id(class_id: int) -&gt; Optional[Class]"},{"location":"service_functions/#get_class_by_namename-str-optionalclass","text":"Retrieves a class by its name. Example: class_obj = get_class_by_name(\"9A\") if class_obj: print(f\"Found class ID: {class_obj.id}, Level: {class_obj.level}\") else: print(\"Class not found\")","title":"get_class_by_name(name: str) -&gt; Optional[Class]"},{"location":"service_functions/#get_classes_by_levellevel-str-listclass","text":"Retrieves all classes at a specific level. Example: classes = get_classes_by_level(\"Grade 9\") print(f\"Found {len(classes)} classes at Grade 9 level\") for class_obj in classes: print(f\"- {class_obj.name}\")","title":"get_classes_by_level(level: str) -&gt; List[Class]"},{"location":"service_functions/#get_all_classes-listclass","text":"Retrieves all classes. Example: classes = get_all_classes() print(f\"Total classes: {len(classes)}\")","title":"get_all_classes() -&gt; List[Class]"},{"location":"service_functions/#add_teacher_to_classclass_id-int-teacher_id-int-optionalclass","text":"Adds a teacher to a class. Example: class_obj = add_teacher_to_class(1, 2) if class_obj: print(f\"Teacher assigned to class {class_obj.name}\") else: print(\"Class or teacher not found\")","title":"add_teacher_to_class(class_id: int, teacher_id: int) -&gt; Optional[Class]"},{"location":"service_functions/#remove_teacher_from_classclass_id-int-teacher_id-int-optionalclass","text":"Removes a teacher from a class. Example: class_obj = remove_teacher_from_class(1, 2) if class_obj: print(f\"Teacher removed from class {class_obj.name}\") else: print(\"Class or teacher not found, or teacher not assigned to class\")","title":"remove_teacher_from_class(class_id: int, teacher_id: int) -&gt; Optional[Class]"},{"location":"service_functions/#get_classes_by_teacherteacher_id-int-listclass","text":"Retrieves all classes taught by a specific teacher. Example: classes = get_classes_by_teacher(1) print(f\"Teacher teaches {len(classes)} classes\") for class_obj in classes: print(f\"- {class_obj.name}\")","title":"get_classes_by_teacher(teacher_id: int) -&gt; List[Class]"},{"location":"service_functions/#get_student_count_in_classclass_id-int-int","text":"Gets the number of students in a class. Example: count = get_student_count_in_class(1) print(f\"Class has {count} students enrolled\")","title":"get_student_count_in_class(class_id: int) -&gt; int"},{"location":"service_functions/#subject-services","text":"Subject services manage operations related to academic subjects.","title":"Subject Services"},{"location":"service_functions/#create_subjectname-str-optionalsubject","text":"Creates a new subject. Example: subject = create_subject(\"Physics\") if subject: print(f\"Created subject with ID: {subject.id}\") else: print(\"Failed to create subject\")","title":"create_subject(name: str) -&gt; Optional[Subject]"},{"location":"service_functions/#update_subjectsubject_id-int-name-optionalstr-none-optionalsubject","text":"Updates a subject's information. Example: updated_subject = update_subject( subject_id=1, name=\"Advanced Physics\" ) if updated_subject: print(\"Subject updated successfully\") else: print(\"Subject not found\")","title":"update_subject(subject_id: int, name: Optional[str] = None) -&gt; Optional[Subject]"},{"location":"service_functions/#delete_subjectsubject_id-int-bool","text":"Deletes a subject. \u26a0\ufe0f Warning: This is a hard delete that completely removes the subject from the database. Consider the impact on related grades and teachers before deletion. Example: if delete_subject(1): print(\"Subject deleted successfully\") else: print(\"Subject not found or could not be deleted\")","title":"delete_subject(subject_id: int) -&gt; bool"},{"location":"service_functions/#get_subject_by_idsubject_id-int-optionalsubject","text":"Retrieves a subject by its ID. Example: subject = get_subject_by_id(1) if subject: print(f\"Found subject: {subject.name}\") else: print(\"Subject not found\")","title":"get_subject_by_id(subject_id: int) -&gt; Optional[Subject]"},{"location":"service_functions/#get_subject_by_namename-str-optionalsubject","text":"Retrieves a subject by its name. Example: subject = get_subject_by_name(\"Mathematics\") if subject: print(f\"Found subject ID: {subject.id}\") else: print(\"Subject not found\")","title":"get_subject_by_name(name: str) -&gt; Optional[Subject]"},{"location":"service_functions/#grade-services","text":"Grade services manage operations related to student grades.","title":"Grade Services"},{"location":"service_functions/#create_gradestudent_id-int-subject_id-int-teacher_id-int-grade-float-comment-optionalstr-none-optionalgrade","text":"Creates a new grade for a student. Example: new_grade = create_grade( student_id=1, subject_id=2, teacher_id=3, grade=85.5, comment=\"Excellent work on the project\" ) if new_grade: print(f\"Created grade entry with ID: {new_grade.id}\") else: print(\"Failed to create grade entry\")","title":"create_grade(student_id: int, subject_id: int, teacher_id: int, grade: float, comment: Optional[str] = None) -&gt; Optional[Grade]"},{"location":"service_functions/#update_gradegrade_id-int-grade-optionalfloat-none-comment-optionalstr-none-optionalgrade","text":"Updates a grade's information. Example: updated_grade = update_grade( grade_id=1, grade=88.0, comment=\"After review, grade adjusted upward\" ) if updated_grade: print(\"Grade updated successfully\") else: print(\"Grade entry not found\")","title":"update_grade(grade_id: int, grade: Optional[float] = None, comment: Optional[str] = None) -&gt; Optional[Grade]"},{"location":"service_functions/#delete_gradegrade_id-int-bool","text":"Deletes a grade. Example: if delete_grade(1): print(\"Grade deleted successfully\") else: print(\"Grade not found or could not be deleted\")","title":"delete_grade(grade_id: int) -&gt; bool"},{"location":"service_functions/#get_grade_by_idgrade_id-int-optionalgrade","text":"Retrieves a grade by its ID. Example: grade = get_grade_by_id(1) if grade: print(f\"Grade: {grade.grade}, Subject: {grade.subject.name}\") else: print(\"Grade not found\")","title":"get_grade_by_id(grade_id: int) -&gt; Optional[Grade]"},{"location":"service_functions/#get_grades_by_studentstudent_id-int-listgrade","text":"Retrieves all grades for a specific student. Example: grades = get_grades_by_student(1) print(f\"Student has {len(grades)} grade entries\") for grade in grades: print(f\"- {grade.subject.name}: {grade.grade}\")","title":"get_grades_by_student(student_id: int) -&gt; List[Grade]"},{"location":"service_functions/#get_grades_by_subjectsubject_id-int-listgrade","text":"Retrieves all grades for a specific subject. Example: grades = get_grades_by_subject(1) print(f\"Subject has {len(grades)} grade entries\")","title":"get_grades_by_subject(subject_id: int) -&gt; List[Grade]"},{"location":"service_functions/#get_grades_by_teacherteacher_id-int-listgrade","text":"Retrieves all grades assigned by a specific teacher. Example: grades = get_grades_by_teacher(1) print(f\"Teacher has assigned {len(grades)} grades\")","title":"get_grades_by_teacher(teacher_id: int) -&gt; List[Grade]"},{"location":"service_functions/#get_grades_by_student_and_subjectstudent_id-int-subject_id-int-listgrade","text":"Retrieves all grades for a student in a specific subject. Example: grades = get_grades_by_student_and_subject(1, 2) print(f\"Found {len(grades)} grade entries for the student in this subject\") for grade in grades: print(f\"- {grade.date.strftime('%Y-%m-%d')}: {grade.grade}\")","title":"get_grades_by_student_and_subject(student_id: int, subject_id: int) -&gt; List[Grade]"},{"location":"service_functions/#get_average_grade_by_studentstudent_id-int-optionalfloat","text":"Gets the average grade for a student across all subjects. Example: avg = get_average_grade_by_student(1) if avg: print(f\"Student's average grade: {avg:.2f}\") else: print(\"No grades found for the student\")","title":"get_average_grade_by_student(student_id: int) -&gt; Optional[float]"},{"location":"service_functions/#get_average_grade_by_subjectsubject_id-int-optionalfloat","text":"Gets the average grade for a subject across all students. Example: avg = get_average_grade_by_subject(1) if avg: print(f\"Subject's average grade: {avg:.2f}\") else: print(\"No grades found for the subject\")","title":"get_average_grade_by_subject(subject_id: int) -&gt; Optional[float]"},{"location":"service_functions/#get_student_subject_grades_summarystudent_id-int-dictstr-any","text":"Gets a summary of grades for a student grouped by subject. Example: summary = get_student_subject_grades_summary(1) print(\"Grade summary by subject:\") for subject, data in summary.items(): print(f\"- {subject}: Average = {data['average']:.2f}\") print(f\" All grades: {data['grades']}\")","title":"get_student_subject_grades_summary(student_id: int) -&gt; Dict[str, Any]"},{"location":"service_functions/#get_recent_gradeslimit-int-10-listgrade","text":"Gets the most recent grades. Example: recent = get_recent_grades(5) # Get 5 most recent grades print(\"Recent grades:\") for grade in recent: print(f\"- {grade.student.user.first_name} {grade.student.user.last_name}: \" + f\"{grade.subject.name} - {grade.grade} \" + f\"({grade.date.strftime('%Y-%m-%d')})\")","title":"get_recent_grades(limit: int = 10) -&gt; List[Grade]"},{"location":"service_functions/#common-patterns-and-best-practices","text":"Error Handling : Most functions return None or False when an operation fails (e.g., item not found). Always check return values. Date Handling : Date strings should be in 'YYYY-MM-DD' format. The utility functions format_date and format_date_to_obj handle conversions. Transactions : All database operations use Flask-SQLAlchemy's session management. Modifications are committed automatically at the end of functions. Parameter Types : Be mindful of parameter types. Some functions expect objects (like a Teacher or Subject instance) while others expect IDs. Soft vs Hard Deletes : User deletion is implemented as a soft delete (deactivation), while other entities use hard deletes. Consider the implications before deleting data.","title":"Common Patterns and Best Practices"},{"location":"usage/","text":"Usage Work in progress","title":"Usage"},{"location":"usage/#usage","text":"Work in progress","title":"Usage"}]}